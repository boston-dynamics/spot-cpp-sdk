// Copyright (c) 2023 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

syntax = "proto3";

package bosdyn.api.graph_nav;
option go_package = "bosdyn/api/graph_nav/area_callback";
option java_outer_classname = "AreaCallbackProto";

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

import "bosdyn/api/header.proto";
import "bosdyn/api/lease.proto";
import "bosdyn/api/service_customization.proto";
import "bosdyn/api/graph_nav/area_callback_data.proto";
import "bosdyn/api/graph_nav/nav.proto";

// Error reporting for things that can go wrong with calls.
message AreaCallbackError {
    string service_name = 1;

    enum CallError {
        ERROR_UNKNOWN = 0;
        ERROR_TRANSPORT = 1;  // Unable to communicate with the callback.
        ERROR_RESPONSE = 2;   // The callback responded with an error.
        ERROR_SERVICE = 3;    // The service was not registered.
    }
    CallError error = 2;

    // If error is ERROR_RESPONSE, the response will be included here.
    oneof response_error {
        BeginCallbackResponse begin_callback = 3;
        BeginControlResponse begin_control = 4;
        UpdateCallbackResponse update_callback = 5;
        EndCallbackResponse end_callback = 6;
    }
}

// Message for requesting information about a area callback implementation.
message AreaCallbackInformationRequest {
    // Common request header.
    RequestHeader header = 1;
}

// Information about how the robot should behave when stopping at a location.
message StopConfiguration {
    // What direction robot should face.
    enum FaceDirection {
        FACE_DIRECTION_UNKNOWN = 0;
        // (Default) Face along the direction of the next edges in the route,
        // regardless of the waypoint orientation.
        FACE_DIRECTION_ALONG_ROUTE = 1;
        // Face in the direction of the recorded waypoint.
        FACE_DIRECTION_WAYPOINT_EXACT = 2;
        // Face in the direction of the recorded waypoint, but if traversing the region in the
        // opposite direction to how it was recorded, flip the orientation 180 degrees.
        FACE_DIRECTION_WAYPOINT_AUTO = 3;
        // Face in the direction of the end of the region.
        FACE_DIRECTION_REGION_END = 4;
    }

    // Which direction the robot should face when lining up at a waypoint.
    FaceDirection face_direction = 3;

    // If true, always align to stairs at the start of the callback.
    // Overrides face_direction  if stairs are found.
    bool face_stairs_if_present = 5;

    // Offset applied to the above facing direction (radians).
    google.protobuf.DoubleValue face_yaw_offset = 4;

    // How close the robot needs to be to the desired pose (meters).
    google.protobuf.DoubleValue max_distance = 1;
    // How close the robot needs to be to the desired pose (radians).
    google.protobuf.DoubleValue max_yaw = 2;
}

// Specific information about how a AreaCallback implementation should be called.
// All fields are optional, and need only be filled out if the desired behavior is different
// from the default.
message AreaCallbackInformation {
    // A area callback can request to be in control of one or more resources at runtime.
    repeated string required_lease_resources = 1;

    // Parameters this area callback supports that do not match any of the other fields.
    DictParam.Spec custom_params = 4;


    // Specify what graph nav should expect to detect for blockages in this region.  For example, if
    // the callback can open doors, the region may initially look blocked due to a closed door, but
    // Graph Nav should still expect it to be traversable.
    enum Blockage {
        BLOCKAGE_UNKNOWN = 0;
        // (Default) The region may appear blocked to Graph Nav, but the callback will still be able
        // to traverse it.  If the region is blocked, Graph Nav should consider it passable unless
        // it actually gets stuck trying to navigate it.
        BLOCKAGE_SKIP = 1;
        // Graph Nav should expect the region to be clear.  If the region is blocked, Graph Nav can
        // treat that as impassable.
        BLOCKAGE_CHECK = 2;
    }
    Blockage blockage = 5;

    // Specify whether graph nav should check for impairment when the callback is in control of the
    // robot.  Certain failures may make Graph Nav unable to navigate, but may not affect the
    // callback.  If the callback is in control of the robot, it may be preferable to let it finish
    // and return control to Graph Nav before reporting any impaired error instead of interrupting
    // the callback.
    enum Impairment {
        IMPAIRMENT_UNKNOWN = 0;
        // (Default) Do not check Graph Nav impairment when the callback is in control.
        IMPAIRMENT_SKIP = 1;
        // Continue to check Graph Nav impairment when the callback is in control.  If Graph Nav
        // detects that it is impaired, it will stop the callback immediately.
        IMPAIRMENT_CHECK = 2;
    }
    Impairment impairment_check = 6;

    // Control whether Graph Nav will stop and wait for nearby entities when crossing the region.
    // Entity waiting is normally on for regular Graph Nav, but is by default turned off inside Area
    // callback regions.
    enum EntityWaiting {
        ENTITY_WAITING_UNKNOWN = 0;
        // (Default) Disable waiting for entities when crossing the region.
        ENTITY_WAITING_DISABLE = 1;
        // Enable waiting for entities when crossing the region.
        ENTITY_WAITING_ENABLE = 2;
    }
    EntityWaiting entity_waiting = 7;

    // How the robot should stop at waypoints by default.
    StopConfiguration default_stop = 8;

    // Configuration to store in the map about how to treat the region edges.
    AreaCallbackMapConfig map_config = 9;
}

// Message for providing information about a area callback implementation.
message AreaCallbackInformationResponse {
    // Common response header.
    ResponseHeader header = 1;

    // Information about how the AreaCallback should be called.
    AreaCallbackInformation info = 2;
}

// Description of an Area Callback region at the time of crossing
message RegionInformation {
    // The unique id of the region we are entering.
    string region_id = 1;

    // Human-readable description of the region we are entering.
    string description = 2;

    // The planned route through the region.
    bosdyn.api.graph_nav.Route route = 3;

    // Flag that indicates that the robot is already inside the callback region at the beginning of
    // the callback, rather than starting from the edge of the region as usual.  This can happen in
    // some cases when the robot gets stuck inside the region, and restarts with a new navigation
    // command.
    bool starting_inside_region = 4;
}

message BeginCallbackRequest {
    // Common request header.
    RequestHeader header = 1;

    // Description of the region we are going to cross.
    RegionInformation region_info = 4;

    // The timestamp (in robot time) by which a command must finish executing.
    // If unset, a AreaCallback implementation may pick a reasonable value.
    google.protobuf.Timestamp end_time = 3;

    // Deprecated in 4.1, the relevant data is set in custom_params and config_data instead.
    // Configuration data associated with this area callback region
    AreaCallbackData recorded_data = 5 [deprecated = true];

    // Any other custom parameters to the callback.
    DictParam custom_params = 6;

    // Custom config data used by the service to do its job.
    google.protobuf.Any config_data = 7;
}

message BeginCallbackResponse {
    // Common response header.
    ResponseHeader header = 1;

    enum Status {
        // UNKNOWN should never be used.
        STATUS_UNKNOWN = 0;

        // The area callback successfully began.
        STATUS_OK = 1;

        // The area callback failed to start due to some problem with the supplied
        // configuration_data.
        STATUS_INVALID_CONFIGURATION = 2;

        // The area callback end time already expired.
        STATUS_EXPIRED_END_TIME = 3;

        // One or more keys or values in custom_params are unsupported by the area callback.
        // See the custom_param_error for details.
        STATUS_CUSTOM_PARAMS_ERROR = 8;
    }

    // Return status for the request.
    Status status = 2;

    // Unique identifier for the AreaCallback, used to update the callback in subsequent calls. If
    // empty, the request was not accepted.
    uint32 command_id = 3;

    // Filled out if status is STATUS_CUSTOM_PARAMS_ERROR.
    CustomParamError custom_param_error = 4;
}

message BeginControlRequest {
    // Common request header.
    RequestHeader header = 1;

    // Leases that a AreaCallback uses once it takes control of the robot. This list should match
    // AreaCallbackInformation required_lease_resources.
    repeated Lease leases = 2;

    // The command id associated with a single execution of a navigation callback.
    uint32 command_id = 3;
}

message BeginControlResponse {
    // Common response header.
    ResponseHeader header = 1;

    // Details about how the lease was used.
    repeated LeaseUseResult lease_use_results = 2;

    enum Status {
        // UNKNOWN should never be used.
        STATUS_UNKNOWN = 0;

        // The AreaCallback has successfully taken control of the robot.
        STATUS_OK = 1;

        // The request command id does not exist or is no longer executing.
        STATUS_INVALID_COMMAND_ID = 2;

        // The supplied lease does not match the leases requested in AreaCallbackInformation.
        STATUS_MISSING_LEASE_RESOURCES = 3;

        // A lease use error occurred.
        STATUS_LEASE_ERROR = 4;
    }

    // Return status for the request.
    Status status = 3;
}

message UpdateCallbackRequest {
    // Common request header.
    RequestHeader header = 1;

    // The command id associated with a single execution of a navigation callback.
    uint32 command_id = 2;

    // If set, update the end time (in robot time) by which a command must finish executing.
    google.protobuf.Timestamp end_time = 3;

    enum Stage {
        STAGE_UNKNOWN = 0;
        STAGE_TO_START = 1;  // Traveling to the start of the region.
        STAGE_AT_START = 2;  // Waiting at the start of the region.
        STAGE_TO_END = 3;    // Traveling to the end of the region.
        STAGE_AT_END = 4;    // Waiting at the end of the region.
    }
    Stage stage = 4;
}

message UpdateCallbackResponse {
    // Common response header.
    ResponseHeader header = 1;

    enum Status {
        // UNKNOWN should never be used.
        STATUS_UNKNOWN = 0;

        // The AreaCallback is actively updating. If an execution error does occur, that is reported
        // via the response oneof.
        STATUS_OK = 1;

        // The request command id does not exist or is no longer executing.
        STATUS_INVALID_COMMAND_ID = 2;

        // The area callback end time already expired.
        STATUS_EXPIRED_END_TIME = 3;
    }

    // Return status for the request.
    Status status = 2;

    // Enumeration of ways navigation callback can ask Graph Nav to continue operating.
    oneof response {
        // Set the control policy that Graph Nav should use when crossing this region, and
        // how and when Graph Nav should delegate control to or wait for the callback.
        // This is the expected way to respond, and changing the policy is how a callback
        // instructs graph nav to wait or continue on.
        NavPolicy policy = 3;

        // An error has occurred. Graph Nav will stop calling UpdateCallback and will call
        // EndCallback.
        Error error = 4;

        // The area callback is complete. Graph Nav will stop calling UpdateCallback and will call
        // EndCallback.
        Complete complete = 5;
    }

    // Localization changes inform Graph Nav when the callback has moved the robot,
    // and are ignored unless callback has control of the robot.
    UpdateLocalization localization = 6;

    message UpdateLocalization {
        enum LocalizationChange {
            // When unset, Graph Nav will not change the localization.
            LOCALIZATION_UNKNOWN = 0;
            // The robot is now at the end of the region.
            LOCALIZATION_AT_END = 1;
        }

        // Change the localization within GraphNav.
        LocalizationChange change = 1;
    }

    message NavPolicy {
        enum Option {
            OPTION_UNKNOWN = 0;
            // Continue past the waypoint. If not already stopped at it, do not stop.
            OPTION_CONTINUE = 1;
            // Stop at the waypoint.
            OPTION_STOP = 2;
            // Stop at the waypoint and transfer control to the callback.
            OPTION_CONTROL = 3;
        }
        // Policy for what Graph Nav should do at the start of the region.
        Option at_start = 1;

        // Policy for what Graph Nav should do at the end of the region.
        Option at_end = 2;
        // Override the default settings for how the robot should behave at the end.
        // Does not apply for OPTION_CONTINUE.
        StopConfiguration end_config = 4;
    }

    message Error {
        enum ErrorType {
            // UNKNOWN should never be used.
            ERROR_UNKNOWN = 0;

            // The callback has determined that this way is impassable.
            ERROR_BLOCKED = 1;

            // Something went wrong with the callback.
            ERROR_CALLBACK_FAILED = 2;

            // A lease error occurred while executing commands.
            ERROR_LEASE = 3;

            // The callback has exceeded allowed execution time.
            ERROR_TIMED_OUT = 4;
        }

        ErrorType error = 1;

        // Details about how the lease was used. Only set when error == ERROR_LEASE.
        repeated LeaseUseResult lease_use_results = 2;
    }

    message Complete {}
}

message EndCallbackRequest {
    // Common request header.
    RequestHeader header = 1;

    // The command id associated with a single execution of a navigation callback.
    uint32 command_id = 2;

    // TODO do we need to provide a reason why the callback was ended? We could use this as an error
    // reporting mechanism for clients who write impossible and invalid callbacks.
}

message EndCallbackResponse {
    // Common response header.
    ResponseHeader header = 1;

    enum Status {
        // UNKNOWN should never be used.
        STATUS_UNKNOWN = 0;

        // The AreaCallback has cleanly ended.
        STATUS_OK = 1;

        // The request command id does not exist or is no longer executing.
        STATUS_INVALID_COMMAND_ID = 2;

        // Shutting down the callback failed. The callback worker thread did not respond to shutdown
        // signal.
        STATUS_SHUTDOWN_CALLBACK_FAILED = 3;
    }

    // Return status for the request.
    Status status = 2;
}

message RouteChangeRequest {
    // Common request header.
    RequestHeader header = 1;

    // The command id for which the route is changing.
    uint32 command_id = 2;

    // The route through the region was originally provided in the BeginCallbackRequest.
    // The fields below affect how the route has changed as a result of being blocked along the
    // original path.  For example, if the original route in BeginCallbackRequest was B⇨C⇨D⇨E, and
    // the robot gets blocked on D⇨E, RouteChange would be called with route as D⇨C⇨B, with
    // unfinished route being D⇨E.

    // The new planned route through the region.
    bosdyn.api.graph_nav.Route route = 3;

    // The remaining old route that was not completed.
    bosdyn.api.graph_nav.Route unfinished_route = 4;
}

message RouteChangeResponse {
    // Common response header.
    ResponseHeader header = 1;

    enum Status {
        // UNKNOWN should never be used.
        STATUS_UNKNOWN = 0;

        // The AreaCallback has acknowledged the route change.
        STATUS_OK = 1;

        // The request command id does not exist or is no longer executing.
        STATUS_INVALID_COMMAND_ID = 2;
    }

    Status status = 2;
}
