// Copyright (c) 2023 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

syntax = "proto3";

package bosdyn.api.mission;
option go_package = "bosdyn/api/mission/util";

option java_outer_classname = "UtilProto";

import "google/protobuf/any.proto";

import "bosdyn/api/alerts.proto";

// Key/Value pair, used in other messages.
message KeyValue {
    string key = 1;
    Value value = 2;
}

// A value of a run-time or compile-time variable.
message Value {
    oneof source {
        ConstantValue constant = 2;           // A constant value.
        VariableDeclaration runtime_var = 3;  // Look up a variable provided at run-time.
        VariableDeclaration parameter = 4;    // Look up a Node Parameter.
    }
}

// Declaration of a run-time or compile-time variable.
message VariableDeclaration {
    // Name of the variable, to be used as the key in KeyValue pairs.
    string name = 1;
    // Supported types for blackboard or parameter values.
    enum Type {
        TYPE_UNKNOWN = 0;
        TYPE_FLOAT = 1;
        TYPE_STRING = 2;
        TYPE_INT = 3;
        TYPE_BOOL = 4;
        TYPE_MESSAGE = 5;
        TYPE_LIST = 6;
        TYPE_DICT = 7;
    }
    // Subtype of the variable if it is a list or dict type. This would be type of the elements of
    // that collection
    message SubType {
        Type type = 1;
        SubType sub_type = 2;
    }
    SubType sub_type = 3;
    // Type that this variable is expected to have. Used to verify assignments and comparisons.
    Type type = 2;
}

// A constant value. Corresponds to the VariableDeclaration Type enum.
message ConstantValue {
    message ListValue {
        repeated ConstantValue values = 1;
    }
    message DictValue {
        map<string, ConstantValue> values = 1;
    }
    oneof value {
        double float_value = 1;
        string string_value = 2;
        int64 int_value = 3;
        bool bool_value = 4;
        google.protobuf.Any msg_value = 5;
        ListValue list_value = 6;
        DictValue dict_value = 7;
    }
}

// Nodes can pass arbitrary text back through the mission state.
message MissionText {
    // The text of the message.
    string text = 1;

    // Severity level of the text message.
    // Here are guidelines for severity as it pertains to missions:
    // INFO: Normal operation.  For example, waiting for charge; waiting on the dock for logs to
    //       download.
    // WARN: Something went wrong, but the mission will try to recover autonomously.
    // ERROR: Something went wrong, and the mission can't recover without human intervention.
    //        Intervention is not time sensitive and can be resolved when convenient.
    // CRITICAL: Something went wrong, and the mission can't recover without human intervention.
    //           Human needs to rescue the robot before battery runs out because it's not charging.
    AlertData.SeverityLevel severity = 2;

    // The node which produced the update message.
    int64 node_id = 3;
}


// Data a user can associate with a node.
message UserData {
    // Identifier. Enables matching the Node uploaded to the MissionService with the NodeInfo
    // downloaded from the MissionService.
    string id = 1;
    // Arbitrary data. We recommend keeping it small, to avoid bloating the size of the mission.
    bytes bytestring = 3;
    // The source representation is a high level representation of this mission.
    // By analogy, it is the "source code" to this "compiled" mission.
    // At this time this field can either contain:
    //      - Nothing
    //      - A [bosdyn.api.autowalk.Walk] if the mission was compiled using the Autowalk service.
    google.protobuf.Any source_representation = 4;
}

// Results from executing / ticking / running a single node.
enum Result {
    // Invalid, should not be used.
    RESULT_UNKNOWN = 0;
    // The node completed running, but failed.
    RESULT_FAILURE = 1;
    // The node is still in process and has not completed.
    RESULT_RUNNING = 2;
    // The node completed, and succeeded.
    RESULT_SUCCESS = 3;
    // The node encountered an operational error while trying to execute.
    RESULT_ERROR = 4;
}
