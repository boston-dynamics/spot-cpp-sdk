// Copyright (c) 2023 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

syntax = "proto3";

package bosdyn.api;
option go_package = "bosdyn/api/power";

option java_outer_classname = "PowerProto";

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "bosdyn/api/header.proto";
import "bosdyn/api/lease.proto";
import "bosdyn/api/license.proto";
import "bosdyn/api/robot_state.proto";

// Feedback on the current state of a power command on the robot.
enum PowerCommandStatus {
    // Status is not specified.
    STATUS_UNKNOWN = 0;

    // Power command is executing.
    STATUS_IN_PROGRESS = 1;

    // Power command succeeded.
    STATUS_SUCCESS = 2;

    // ERROR: Robot cannot be powered on while on wall power.
    STATUS_SHORE_POWER_CONNECTED = 3;

    // ERROR: Battery not inserted into robot.
    STATUS_BATTERY_MISSING = 4;

    // ERROR: Power command cant be overwritten.
    STATUS_COMMAND_IN_PROGRESS = 5;

    // ERROR: Cannot power on while estopped. A robot may have multiple estops.
    // Inspect EStopState for additional info.
    STATUS_ESTOPPED = 6;

    // ERROR: Cannot power due to a fault. Inspect FaultState for more info.
    STATUS_FAULTED = 7;

    // ERROR: Internal error occurred, may be clear-able by issuing a power off command.
    STATUS_INTERNAL_ERROR = 8;

    // ERROR: License check failed. Check license_status field for details.
    STATUS_LICENSE_ERROR = 9;

    // ERROR: The Spot hardware is not compatible with the request request.
    INCOMPATIBLE_HARDWARE_ERROR = 10;

    // ERROR: Robot has overridden the power command and disabled motor power. In the case
    // of a commanded power OFF, robot will report SUCCESS if power is disabled.
    STATUS_OVERRIDDEN = 11;

    // ERROR: Cannot power on while a Keepalive policy with a motors-off action is active.
    // See the Keepalive API service for more details.
    STATUS_KEEPALIVE_MOTORS_OFF = 12;
}

// The PowerCommand request which specifies a change in the robot's motor power.
message PowerCommandRequest {
    // Common request header.
    RequestHeader header = 1;

    // The Lease to show ownership of the robot.
    Lease lease = 2;

    // Commands for the robot to execute.
    // Note that not all Spot robots are compatible with all these commands. Check your robot's
    // HardwareConfiguration in bosdyn.api.robot_state.
    enum Request {
        option allow_alias = true;
        REQUEST_UNKNOWN = 0;                  // Invalid request; do not use.
        REQUEST_OFF = 1 [deprecated = true];  // Cut power to motors immediately.
        REQUEST_ON = 2 [deprecated = true];   // Turn on power to the robot motors.
        REQUEST_OFF_MOTORS = 1;               // Cut power to motors immediately.
        REQUEST_ON_MOTORS = 2;                // Turn on power to the robot motors.
        REQUEST_OFF_ROBOT = 3;                // Turn off the robot. Same as physical switch.
        REQUEST_CYCLE_ROBOT = 4;              // Power cycle the robot. Same as physical switch.
        REQUEST_OFF_PAYLOAD_PORTS = 5;        // Cut power to the payload ports.
        REQUEST_ON_PAYLOAD_PORTS = 6;         // Turn on power to the payload ports.
        REQUEST_OFF_WIFI_RADIO = 7;           // Cut power to the hardware Wi-Fi radio.
        REQUEST_ON_WIFI_RADIO = 8;            // Power on the hardware Wi-Fi radio.

    }
    Request request = 3;
}

// The PowerCommand response message which contains a unique identifier that can be used to
// get feedback on the progress of a power command from the power service.
message PowerCommandResponse {
    // Common response header.
    ResponseHeader header = 1;

    // Details about how the lease was used.
    LeaseUseResult lease_use_result = 2;

    // Current feedback of specified command.
    PowerCommandStatus status = 3;

    // Unique identifier for the command, If empty, was not accepted.
    uint32 power_command_id = 4;

    // License check status
    LicenseInfo.Status license_status = 5;

    // Optional list of active faults blocking success of the PowerCommandRequest
    repeated SystemFault blocking_faults = 6;
}

// The PowerCommandFeedback request message, which can get the feedback for a specific
// power command id number.
message PowerCommandFeedbackRequest {
    // Common request header.
    RequestHeader header = 1;

    // Unique identifier for the command of which feedback is desired.
    uint32 power_command_id = 2;
}

// The PowerCommandFeedback response message, which contains the progress of the power command.
message PowerCommandFeedbackResponse {
    // Common response header.
    ResponseHeader header = 1;

    // Current status of specified command.
    PowerCommandStatus status = 2;

    // Optional list of active faults blocking success of the PowerCommandRequest
    repeated SystemFault blocking_faults = 3;
}

message FanPowerCommandRequest {
    // Common request header.
    RequestHeader header = 1;

    // The Lease to show ownership of the robot.
    Lease lease = 2;

    // What percent power does the user want the fans to run at?
    // Range is 0 to 100, with 0 being off and 100 being full power
    int32 percent_power = 3;

    // How long the user wants control of the fans
    // May not be duration the command is actually in effect for if temperature gets too high
    google.protobuf.Duration duration = 4;
}

message FanPowerCommandResponse {
    // Common response header.
    ResponseHeader header = 1;

    // Details about how the lease was used.
    LeaseUseResult lease_use_result = 2;

    // Feedback on the current state of a fan power command on the robot.
    enum Status {
        // Status is not specified.
        STATUS_UNKNOWN = 0;

        // Fan Power command succeeded. May still get overridden later in duration
        STATUS_OK = 1;

        // ERROR: Fan Power command rejected because temperature above safe threshold
        STATUS_TEMPERATURE_TOO_HIGH = 2;
    }
    // Current feedback of specified command.
    Status status = 3;

    // Based on received duration, the time when this command will stop being in effect
    google.protobuf.Timestamp desired_end_time = 4;

    // Unique identifier for the command, If empty, was not accepted.
    uint32 command_id = 5;
}

// The PowerCommandFeedback request message, which can get the feedback for a specific
// power command id number.
message FanPowerCommandFeedbackRequest {
    // Common request header.
    RequestHeader header = 1;

    // Unique identifier for the command of which feedback is desired.
    uint32 command_id = 2;
}

// The PowerCommandFeedback response message, which contains the progress of the power command.
message FanPowerCommandFeedbackResponse {
    // Common response header.
    ResponseHeader header = 1;

    // Feedback on the current state of a fan power command on the robot.
    enum Status {
        // Status is not specified.
        STATUS_UNKNOWN = 0;

        // Fan Power command succeeded for entire requested duration and is now done.
        STATUS_COMPLETE = 1;

        // Fan command is still in effect due to requested duration but has succeeded so far
        STATUS_RUNNING = 2;

        // ERROR: Command stopped before finish due to temperature becoming too high
        STATUS_TEMPERATURE_STOP = 3;

        // ERROR: A newer Fan Power Request took over before the full duration of this request was
        // up.
        STATUS_OVERRIDDEN_BY_COMMAND = 4;
    }

    // Current status of specified command.
    Status status = 2;

    // Based on duration, the time that this command was intended to stop being in effect. If
    // stopped/overridden prematurely, early_stop_time will reflect the actual time the command
    // stopped being in effect
    google.protobuf.Timestamp desired_end_time = 3;

    // If the command was stopped or overridden before its desired end time, the time at which it
    // was stopped. If command succeeded, this time is empty.
    google.protobuf.Timestamp early_stop_time = 4;
}

message ResetSafetyStopRequest {
    // Common request header.
    RequestHeader header = 1;

    // The Lease to show ownership of the robot.
    Lease lease = 2;

    // Types of safety stop commands the robot can execute.
    enum SafetyStopType {
        SAFETY_STOP_UNKNOWN = 0;    // Invalid request; do not use.
        SAFETY_STOP_PRIMARY = 1;    // Primary safety stop.
        SAFETY_STOP_REDUNDANT = 2;  // Redundant safety stop.
    }
    SafetyStopType safety_stop_type = 3;
}

message ResetSafetyStopResponse {
    // Common response header.
    ResponseHeader header = 1;

    // Details about how the lease was used.
    LeaseUseResult lease_use_result = 2;

    // Feedback on the reset safety stop command.
    enum Status {
        // Status is not specified.
        STATUS_UNKNOWN = 0;

        // Reset safety stop command succeeded.
        STATUS_OK = 1;

        // ERROR: Reset safety stop command failed due to incompatible hardware.
        STATUS_INCOMPATIBLE_HARDWARE_ERROR = 2;

        // ERROR: Reset safety stop command was run and failed.
        STATUS_FAILED = 3;

        // ERROR: Reset safety stop command failed due to unknown stop type.
        STATUS_UNKNOWN_STOP_TYPE = 4;
    }
    // Current feedback of specified command.
    Status status = 3;
}
