# Copyright (c) 2022 Boston Dynamics, Inc.  All rights reserved.
#
# Downloading, reproducing, distributing or otherwise using the SDK Software
# is subject to the terms and conditions of the Boston Dynamics Software
# Development Kit License (20191101-BDSDK-SL).

# This file is autogenerated.

cmake_minimum_required (VERSION 3.10.2)
project (bosdyn)

set(PACKAGE_VERSION_MAJOR 3)
set(PACKAGE_VERSION_MINOR 1)
set(PACKAGE_VERSION_PATCH 2)
set(PACKAGE_VERSION "${PACKAGE_VERSION_MAJOR}.${PACKAGE_VERSION_MINOR}.${PACKAGE_VERSION_PATCH}")

# Dependencies:
find_package(Protobuf CONFIG REQUIRED)
find_package(Eigen3 CONFIG REQUIRED)
find_package(gRPC CONFIG REQUIRED)
find_package(CLI11 CONFIG REQUIRED)
find_package(Threads REQUIRED)

get_target_property(grpc_cpp_plugin_location gRPC::grpc_cpp_plugin LOCATION)

# Command-line arguments:
set(CMAKE_BUILD_TYPE "Release" CACHE STRING "Choose the type of build." FORCE)
option(BUILD_SHARED_LIBS "Build using shared libraries" ON)
option(BUILD_CHOREOGRAPHY_LIBS "Boolean to control whether choreography proto libraries are built" ON)

IF (NOT UNIX)
    SET(BUILD_SHARED_LIBS OFF CACHE BOOL "Build using shared libraries" FORCE)
ENDIF (NOT UNIX)

include(GNUInstallDirs)

### API protos LIBRARY ###
#find the proto files
set(API_protos_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../protos/)
set(protos_OUTPUT_DIR ${CMAKE_CURRENT_BINARY_DIR}/protos)
file(MAKE_DIRECTORY ${protos_OUTPUT_DIR})
file(GLOB_RECURSE bosdyn_protos_files CONFIGURE_DEPENDS
    RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} "${API_protos_PATH}/*.proto")

#only do the compilation once
add_library(bosdyn_api_obj OBJECT ${bosdyn_protos_files})
set_property(TARGET bosdyn_api_obj PROPERTY POSITION_INDEPENDENT_CODE 1)
target_link_libraries(bosdyn_api_obj PUBLIC protobuf::libprotobuf gRPC::grpc gRPC::grpc++)
target_include_directories(bosdyn_api_obj PUBLIC
  $<BUILD_INTERFACE:${protos_OUTPUT_DIR}>
  $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
)
protobuf_generate(TARGET bosdyn_api_obj LANGUAGE cpp
  IMPORT_DIRS ${API_protos_PATH} 
  PROTOC_OUT_DIR ${protos_OUTPUT_DIR})
protobuf_generate(TARGET bosdyn_api_obj
  LANGUAGE grpc GENERATE_EXTENSIONS .grpc.pb.h .grpc.pb.cc
  PLUGIN "protoc-gen-grpc=${grpc_cpp_plugin_location}"
  IMPORT_DIRS ${API_protos_PATH} 
  PROTOC_OUT_DIR ${protos_OUTPUT_DIR}
)
#set install params
install(
  TARGETS bosdyn_api_obj 
  EXPORT ${PROJECT_NAME}Targets 
  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
  INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
)

# actually make some libraries
if (BUILD_SHARED_LIBS)
  add_library(bosdyn_api SHARED $<TARGET_OBJECTS:bosdyn_api_obj>)
  target_link_libraries(bosdyn_api INTERFACE bosdyn_api_obj)
  install(
    TARGETS bosdyn_api 
    EXPORT ${PROJECT_NAME}Targets 
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
  )
endif()

add_library(bosdyn_api_static STATIC $<TARGET_OBJECTS:bosdyn_api_obj>)
target_link_libraries(bosdyn_api_static INTERFACE bosdyn_api_obj)
install(
  TARGETS bosdyn_api_static 
  EXPORT ${PROJECT_NAME}Targets 
  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
  INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
)

# install the gnerated protobuf and grpc header files
install(DIRECTORY ${protos_OUTPUT_DIR}/
  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
  FILES_MATCHING PATTERN "*.h"
)


if (BUILD_CHOREOGRAPHY_LIBS)
  ### API choreography_protos LIBRARY ###
  #find the proto files
  set(API_choreography_protos_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../choreography_protos/)
  set(choreography_protos_OUTPUT_DIR ${CMAKE_CURRENT_BINARY_DIR}/choreography_protos)
  file(MAKE_DIRECTORY ${choreography_protos_OUTPUT_DIR})
  file(GLOB_RECURSE bosdyn_choreography_protos_files CONFIGURE_DEPENDS
      RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} "${API_choreography_protos_PATH}/*.proto")

  #only do the compilation once
  add_library(bosdyn_choreography_protos_obj OBJECT ${bosdyn_choreography_protos_files})
  set_property(TARGET bosdyn_choreography_protos_obj PROPERTY POSITION_INDEPENDENT_CODE 1)
  target_link_libraries(bosdyn_choreography_protos_obj PUBLIC bosdyn_api)
  target_include_directories(bosdyn_choreography_protos_obj PUBLIC
    $<BUILD_INTERFACE:${choreography_protos_OUTPUT_DIR}>
    $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
  )
  protobuf_generate(TARGET bosdyn_choreography_protos_obj LANGUAGE cpp
    IMPORT_DIRS ${API_choreography_protos_PATH} ${API_protos_PATH} 
    PROTOC_OUT_DIR ${choreography_protos_OUTPUT_DIR})
  protobuf_generate(TARGET bosdyn_choreography_protos_obj
    LANGUAGE grpc GENERATE_EXTENSIONS .grpc.pb.h .grpc.pb.cc
    PLUGIN "protoc-gen-grpc=${grpc_cpp_plugin_location}"
    IMPORT_DIRS ${API_choreography_protos_PATH} ${API_protos_PATH} 
    PROTOC_OUT_DIR ${choreography_protos_OUTPUT_DIR}
  )
  #set install params
  install(
    TARGETS bosdyn_choreography_protos_obj 
    EXPORT ${PROJECT_NAME}Targets 
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
  )

  # actually make some libraries
  if (BUILD_SHARED_LIBS)
    add_library(bosdyn_choreography_protos SHARED $<TARGET_OBJECTS:bosdyn_choreography_protos_obj>)
    target_link_libraries(bosdyn_choreography_protos INTERFACE bosdyn_choreography_protos_obj)
    install(
      TARGETS bosdyn_choreography_protos 
      EXPORT ${PROJECT_NAME}Targets 
      LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
      INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
    )
  endif()

  add_library(bosdyn_choreography_protos_static STATIC $<TARGET_OBJECTS:bosdyn_choreography_protos_obj>)
  target_link_libraries(bosdyn_choreography_protos_static PUBLIC bosdyn_choreography_protos_obj)
  install(
    TARGETS bosdyn_choreography_protos_static 
    EXPORT ${PROJECT_NAME}Targets 
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
  )

  # install the gnerated protobuf and grpc header files
  install(DIRECTORY ${choreography_protos_OUTPUT_DIR}/
    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
    FILES_MATCHING PATTERN "*.h"
  )
endif()


### CLIENT LIBRARY ###
file(GLOB_RECURSE bosdyn_client_SRC CONFIGURE_DEPENDS "${CMAKE_CURRENT_SOURCE_DIR}/bosdyn/*.cpp")
add_library (bosdyn_client_obj OBJECT ${bosdyn_client_SRC})
set_property(TARGET bosdyn_client_obj PROPERTY POSITION_INDEPENDENT_CODE 1)
target_compile_features(bosdyn_client_obj PUBLIC cxx_std_14)
target_link_libraries(bosdyn_client_obj PUBLIC bosdyn_api Eigen3::Eigen)
target_include_directories(bosdyn_client_obj PUBLIC
  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
  $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
)
#set install params
install(
  TARGETS bosdyn_client_obj 
  EXPORT ${PROJECT_NAME}Targets 
  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
  INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
)
# actually make some libraries
if (BUILD_SHARED_LIBS)
  add_library (bosdyn_client SHARED $<TARGET_OBJECTS:bosdyn_client_obj>)
  target_link_libraries(bosdyn_client PUBLIC bosdyn_client_obj bosdyn_client_obj)
  install(
    TARGETS bosdyn_client 
    EXPORT ${PROJECT_NAME}Targets 
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
  )
endif()

add_library (bosdyn_client_static STATIC ${bosdyn_client_SRC})
target_link_libraries(bosdyn_client_static PUBLIC bosdyn_client_obj bosdyn_api_static)
install(
    TARGETS bosdyn_client_static
    EXPORT ${PROJECT_NAME}Targets 
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
  )

#extract the header files from the src dir and install them
install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/bosdyn 
  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
  FILES_MATCHING PATTERN "*.h"
)


### EXAMPLE EXECUTABLES ###

add_executable(hello_spot ${CMAKE_CURRENT_SOURCE_DIR}/examples/hello_spot/hello_spot.cpp)
target_compile_features(hello_spot PUBLIC cxx_std_14)
target_link_libraries(hello_spot PUBLIC bosdyn_client_static CLI11::CLI11)
install(TARGETS hello_spot RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})

add_executable(spot_cam ${CMAKE_CURRENT_SOURCE_DIR}/examples/spot_cam/ptz_example.cpp)
target_compile_features(spot_cam PUBLIC cxx_std_14)
target_link_libraries(spot_cam PUBLIC bosdyn_client_static CLI11::CLI11)
install(TARGETS spot_cam RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})

add_executable(get_image ${CMAKE_CURRENT_SOURCE_DIR}/examples/get_image/get_image.cpp)
target_compile_features(get_image PUBLIC cxx_std_14)
target_link_libraries(get_image PUBLIC bosdyn_client_static CLI11::CLI11)
install(TARGETS get_image RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})

add_executable(basic_robot_command ${CMAKE_CURRENT_SOURCE_DIR}/examples/basic_robot_command/basic_robot_command.cpp)
target_compile_features(basic_robot_command PUBLIC cxx_std_14)
target_link_libraries(basic_robot_command PUBLIC bosdyn_client_static CLI11::CLI11)
install(TARGETS basic_robot_command RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})


# Save a version file in the project's binary directory
include(CMakePackageConfigHelpers)
set(VERSION_FILE "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake")
write_basic_package_version_file("${VERSION_FILE}"
  VERSION ${PACKAGE_VERSION}
  COMPATIBILITY AnyNewerVersion
)

#this defines the instructions to generate a relocatable targets file at install time
set(PROJECT_CONFIG_PATH "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}")
set(EXPORTS_FILE "UseInstall${PROJECT_NAME}.cmake")
install(
    EXPORT ${PROJECT_NAME}Targets
    NAMESPACE ${PROJECT_NAME}::
    FILE ${EXPORTS_FILE}
    DESTINATION ${PROJECT_CONFIG_PATH}
)

#this generates a relocatable config file for install, but it gets invoked at build time,
#so the output has to be saved in a way that won't conflict with the export config
set(CONFIG_FILE "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}InstallConfig.cmake")


configure_package_config_file( "cmake/ProjectConfig.cmake.in"
  ${CONFIG_FILE}
  INSTALL_DESTINATION ${PROJECT_CONFIG_PATH}
)
#and because the config is a file in the build dir, it has to be installed explicitly
install(
    FILES "${CONFIG_FILE}"
    RENAME ${PROJECT_NAME}Config.cmake
    DESTINATION "${PROJECT_CONFIG_PATH}"
)

option(ENABLE_EXPORT "Cause CMake to record this build so other projects can find it " ON)
if(ENABLE_EXPORT)
  set(EXPORTS_FILE "UseExport${PROJECT_NAME}.cmake")
  # Provide a targets script for the build dir
  export(EXPORT ${PROJECT_NAME}Targets
    NAMESPACE ${PROJECT_NAME}::
    FILE ${EXPORTS_FILE}
  )

  set(MAKE_PLUGIN_FILE "cmake/make_plugin.cmake")
  set(MAKE_APP_FILE "cmake/make_standard_app.cmake")
  #export requires a config.cmake to play well with find_package, so that gets made here
  configure_package_config_file( "cmake/ProjectConfig.cmake.in"
  ${PROJECT_NAME}Config.cmake
    INSTALL_DESTINATION ${CMAKE_CURRENT_BINARY_DIR}
    INSTALL_PREFIX ${CMAKE_CURRENT_BINARY_DIR}
  )

  # Stick build location in the central CMake user package registry, so that
  # it may be easily found.
  message(STATUS "Location of this build will be exported. Set ENABLE_EXPORT to OFF if you don't want this and delete ~/.cmake/projects/${PROJECT_NAME} ")
  export(PACKAGE ${PROJECT_NAME})
endif()


return()